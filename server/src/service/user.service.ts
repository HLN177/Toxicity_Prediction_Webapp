import { DocumentDefinition, FilterQuery } from 'mongoose';
import UserModel, { UserDocument } from '../models/user.model';
import { omit } from 'lodash';

async function createUser(
  // the reason to omit these two properties
  // is because we don't need to pass them into this function
  // they're going to be generated by mongoose when we create and update
  input: DocumentDefinition<
    Omit<UserDocument, 'createdAt' | 'updatedAt' | 'comparePassword'>
  >
) {
  try {
    const user = await UserModel.create(input);
    return omit(user.toJSON(), ["password"]);
  } catch(e: any) {
    throw new Error(e);
  }
};

async function validatePassword(
  {email, password}:{email: string, password: string}
) {
  // search user in db
  const user = await UserModel.findOne({email});
  // if user doesn't exist, return false
  if (!user) {
    return false;
  }
  // compare password
  const isValid = await user.comparePassword(password);
  // if password doesn't match, return false
  if (!isValid) {
    return false;
  }
  // password match, return user while omit password
  return omit(user.toJSON(), ["password"]);
}

async function findUser(query: FilterQuery<UserDocument>) {
  return UserModel.findOne(query).lean();
}

export {
  createUser,
  validatePassword,
  findUser
};